#!/bin/bash

# ===========================================================
# Verificador de sa√∫de do Docker Compose - ImoGuru
# ===========================================================

COMPOSE_FILE="docker-compose.yml"
FRONTEND_PORT=8085
BACKEND_PORT=3001
BACKEND_HEALTH_URL="http://localhost:${BACKEND_PORT}/health"
FRONTEND_URL="http://localhost:${FRONTEND_PORT}"
REQUIRED_ENV_VARS=("VITE_SUPABASE_URL" "VITE_SUPABASE_PUBLISHABLE_KEY" "DB_HOST" "DB_PORT" "DB_NAME" "DB_USER" "DB_PASSWORD" "JWT_SECRET" "RESEND_API_KEY" "BOOTSTRAP_SECRET" "CORS_ORIGIN")

echo "üîç Iniciando verifica√ß√£o do ambiente Docker Compose..."
echo "------------------------------------------------------------"

# 1Ô∏è‚É£ Verificar arquivo docker-compose.yml
if [ ! -f "$COMPOSE_FILE" ]; then
  echo "‚ùå Arquivo $COMPOSE_FILE n√£o encontrado!"
  exit 1
fi
echo "‚úÖ docker-compose.yml encontrado"

# 2Ô∏è‚É£ Verificar vari√°veis obrigat√≥rias
echo "üîß Verificando vari√°veis de ambiente..."
MISSING_ENV=false
for VAR in "${REQUIRED_ENV_VARS[@]}"; do
  if [ -z "${!VAR}" ]; then
    echo "‚ö†Ô∏è  Vari√°vel ausente: $VAR"
    MISSING_ENV=true
  fi
done
if [ "$MISSING_ENV" = true ]; then
  echo "‚ùå Faltam vari√°veis obrigat√≥rias no ambiente (.env)"
  exit 1
else
  echo "‚úÖ Todas as vari√°veis obrigat√≥rias est√£o definidas"
fi

# 3Ô∏è‚É£ Subir o Compose (se n√£o estiver rodando)
RUNNING_CONTAINERS=$(docker compose ps -q)
if [ -z "$RUNNING_CONTAINERS" ]; then
  echo "üöÄ Containers n√£o est√£o rodando ‚Äî iniciando..."
  docker compose up -d
else
  echo "‚úÖ Containers j√° est√£o rodando"
fi

# 4Ô∏è‚É£ Aguardar healthchecks
echo "‚è≥ Aguardando verifica√ß√£o de sa√∫de dos servi√ßos..."
sleep 10

# 5Ô∏è‚É£ Verificar status dos containers
echo "------------------------------------------------------------"
echo "üì¶ STATUS DOS CONTAINERS:"
docker compose ps

# 6Ô∏è‚É£ Verificar logs recentes com erros
echo "------------------------------------------------------------"
echo "üßæ Logs recentes (√∫ltimos 20s) com erros:"
docker compose logs --since 20s | grep -iE "error|fail|exception" || echo "‚úÖ Nenhum erro recente encontrado"

# 7Ô∏è‚É£ Testar acessos HTTP internos
echo "------------------------------------------------------------"
echo "üåê Testando endpoints locais..."

if curl -s -o /dev/null -w "%{http_code}" "$BACKEND_HEALTH_URL" | grep -q "200"; then
  echo "‚úÖ Backend OK (${BACKEND_HEALTH_URL})"
else
  echo "‚ùå Falha no backend (${BACKEND_HEALTH_URL})"
fi

if curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" | grep -q "200"; then
  echo "‚úÖ Frontend OK (${FRONTEND_URL})"
else
  echo "‚ö†Ô∏è  Frontend n√£o retornou 200 ‚Äî talvez ainda compilando"
fi

# 8Ô∏è‚É£ Verificar healthcheck reportado pelo Docker
echo "------------------------------------------------------------"
echo "ü©∫ Healthcheck Report:"
docker inspect --format='{{.Name}}: {{range .State.Health.Log}}{{.ExitCode}} {{.Output}}{{end}}' $(docker ps -q) | sed 's/^/\n/'

# 9Ô∏è‚É£ Resumo final
echo "------------------------------------------------------------"
echo "üèÅ Verifica√ß√£o conclu√≠da!"
docker compose ps --services --filter "status=running" > /dev/null && echo "‚úÖ Todos os servi√ßos est√£o ativos"

echo "\nüß† Como usar"
echo "\nSalve esse script no mesmo diret√≥rio do seu docker-compose.yml"
echo "Arquivo: check_compose_health.sh"
echo "\nD√™ permiss√£o de execu√ß√£o:"
echo "\nchmod +x check_compose_health.sh"
echo "\nExecute:"
echo "\n./check_compose_health.sh"

